class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int eggDrop(int e, int f) 
    {
        // Your code here
        int dp[][]=new int[f+1][e+1];

             //base cases : 1)only 1 floor=1 trial 2)0 floor=0 trials
        for(int i=1;i<=e;i++){
            dp[1][i]=1;
            dp[0][i]=0;
        }
        
        //base cases: 1)only 1 egg & f floors: f trails
        for(int j=1;j<=f;j++){
            dp[j][1]=j;
        }
        
        for(int i=2;i<=f;i++){
            for(int j=2;j<=e;j++){
                dp[i][j]=Integer.MAX_VALUE;

                          //consider xth floor
                for(int x=1;x<=i;x++){

                                //if @ xth floor: 1)egg breaks- consider x-1 floors with e-1 eggs  

                                //2)if egg donoesn't break: consider f-x floors with e eggs
                    dp[i][j]=Math.min(dp[i][j],1+Math.max(dp[x-1][j-1],dp[i-x][j]));
                }
            }
        }
        
        return dp[f][e];
    }
}
