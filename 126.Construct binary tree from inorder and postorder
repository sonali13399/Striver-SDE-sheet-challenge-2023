/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        TreeNode root = build(inorder,0,inorder.length-1,postorder,0,
                             postorder.length-1,map);
        return root;
    }
    public TreeNode build(int[] inorder, int is,int ie, int[] postorder, int ps,
                         int pe,HashMap<Integer,Integer> map){
        if(is>ie || ps>pe)return null;
        TreeNode root = new TreeNode(postorder[pe]);
        int mid = map.get(postorder[pe]);
        int left = mid - is;
        
        root.left = build(inorder,is,mid-1,postorder,ps,ps+left-1,map);
        root.right = build(inorder,mid+1,ie,postorder,ps+left,pe-1,map);
        return root;
    }
}
