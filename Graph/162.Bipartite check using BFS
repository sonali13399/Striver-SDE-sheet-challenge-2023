class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] color=new int[n];
        Arrays.fill(color,-1);
        
        for(int i=0;i<n;i++){
            if(color[i]==-1 && checkBipartite(i,graph,color,1)==false){
                return false;
            }
        }
        return true;
    }
    public boolean checkBipartite(int src,int[][] graph,int[] color,int c){
        Queue<Integer> q = new LinkedList<>();
        q.add(src);
        color[src]=c;
        
        while(!q.isEmpty()){
            int top = q.poll();
            
            for(int u:graph[top]){
                if(color[u]==-1){
                    q.add(u);color[u]=1-color[top];
                }else if(color[u]==color[top]){
                    return false;
                }
            }
        }
        return true;
    }
}
