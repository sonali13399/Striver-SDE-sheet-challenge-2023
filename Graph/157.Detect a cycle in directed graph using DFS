import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
public class Solution {
  public static boolean detectCycleInDirectedGraph(int n, ArrayList < ArrayList < Integer >> edges) {
    // Write your code here.
    ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
    for(int i=0;i<n+1;i++){
      adj.add(new ArrayList<>());
    }
    for(ArrayList<Integer> edge:edges){
      adj.get(edge.get(0)).add(edge.get(1));
    }

    int[] vis =new int[n+1];
    for(int i=1;i<=n;i++){
      if(vis[i]==0){
        if(dfs(i,adj,vis)==true){
          return true;
        }
      }
    }
    return false;
  }
  public static boolean dfs(int src,ArrayList<ArrayList<Integer>> adj,int[] vis){
    vis[src]=1;
    for(int u:adj.get(src)){
      if(vis[u]==0){
        if(dfs(u,adj,vis)==true){
          return true;
        }
      }else if(vis[u]==1){
        return true;
      }
    }
    vis[src]=2;
    return false;
  }
}
