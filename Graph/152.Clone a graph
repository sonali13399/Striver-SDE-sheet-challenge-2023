/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
       if(node==null){
           return null;
       }
        Map<Node,Node> map = new HashMap<>();
        Node clone_node=new Node(node.val);
        map.put(node,clone_node);
        dfs(node,clone_node,map);
        return clone_node;
    }
    public void dfs(Node node,Node clone_node,Map<Node,Node> map){
        for(Node n:node.neighbors){
            if(map.containsKey(n)){
                clone_node.neighbors.add(map.get(n));
            }else{
                Node clone=new Node(n.val);
                map.put(n,clone);
                clone_node.neighbors.add(clone);
                dfs(n,clone,map);
            }
        }
    }
}
