import java.util.*;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<n+1;++i){
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < m; ++i) {
            adj.get(edges[i][0]).add(Integer.valueOf(edges[i][1]));
            adj.get(edges[i][1]).add(Integer.valueOf(edges[i][0]));
        }

        int[] vis = new int[n+1];
        Arrays.fill(vis,0);
        for(int i=1;i<=n;i++){
            if(vis[i]==0){
                if(dfs(i,-1,adj,vis)==true){
                    return "Yes";
                }
            }
        }
        return "No";
    }
    public static boolean dfs(Integer src,Integer parent,ArrayList<ArrayList<Integer>> adj,int[] vis){
        vis[src]=1;
        for(Integer u:adj.get(src)){
            if(vis[u]==0){
                if(dfs(u,src,adj,vis)==true)return true;
            }else if(u!=parent){
                return true;
            }
        }
        return false;
    }
    
}
