class Solution {
    public int numIslands(char[][] grid) {
        int row=grid.length,col=grid[0].length;
        boolean[][] visited = new boolean[row][col];
        int island_count=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]=='1' && visited[i][j]==false){
                    dfs(i,j,row,col,grid,visited);
                    island_count++;
                }   
            }
        }
        return island_count;
    }
    public void dfs(int i,int j,int n,int m,char[][] grid,boolean[][] visited){
        visited[i][j]=true;
        int[] dx={-1,1,0,0};
        int[] dy={0,0,-1,1};
        int newI=0,newJ=0;
        for(int k=0;k<4;k++){
            newI=i+dx[k];newJ=j+dy[k];
            if(isValid(newI,newJ,n,m,grid,visited) && visited[newI][newJ]==false){
                dfs(newI,newJ,n,m,grid,visited);
            }
        }
    }
    public boolean isValid(int i,int j,int n,int m,char[][] grid, boolean[][] visited){
        return (i>=0 && i<n && j>=0 && j<m && grid[i][j]=='1' && visited[i][j]==false);
    }
}
