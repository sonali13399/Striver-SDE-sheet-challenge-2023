class Pair{
    int x;
    int y;
    Pair(int x,int y){
        this.x=x;this.y=y;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        
        Queue<Pair> q = new ArrayDeque<>(); int fresh=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    q.offer(new Pair(i,j));
                    // grid[i][j]=-1;
                }else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0){
            return 0;
        }
        if(q.isEmpty()){
            return -1;
        }
        int ans=0;
        while(!q.isEmpty()){
            int size=q.size();
            
            for(int s=0;s<size;s++){
                Pair top =q.remove();
            int[] dir={0,-1,0,1,0};
            for(int k=0;k<4;k++){
                int new_x=top.x+dir[k];
                int new_y=top.y+dir[k+1];
                
                if(new_x>=0 && new_x<grid.length && new_y>=0 && new_y<grid[0].length && grid[new_x][new_y]==1){
                    q.offer(new Pair(new_x,new_y));
                    grid[new_x][new_y]=2; fresh--;
                }
            }
            }
            ans++;
        }
        
        return fresh==0 ? ans-1 :-1;
    }
}
